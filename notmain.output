Nonterminals useless in grammar

   newline
   number
   word
   struct
   function
   parameters
   function-main-body
   return-statement
   main-function
   type-specifier
   variable-init
   identifier
   program-command
   assign-statement
   statement
   unary-operator
   condition
   logical-expression
   iteration-statement
   selection-statement
   elseif
   else
   case
   default
   print-statement
   message
   val
   break-statement
   line-comment
   multiline-comment
   comment


Terminals unused in grammar

   "Space"
   "Letter"
   "Vars"
   "Char"
   "Int"
   "Struct"
   "End of Struct"
   "TYPEDEF"
   "Print"
   "If"
   "Then"
   "End if"
   "While"
   "End While"
   "Else"
   "Else If"
   "For"
   "To"
   "Step"
   "End For"
   "Start Main"
   "End Main"
   "Function"
   "End Function"
   "Return"
   "Switch"
   "Case"
   "Default"
   "End Switch"
   "Break"
   "AND"
   "OR"
   "Digit"
   ">"
   "="
   ":"
   "<"
   "=="
   "!="
   "+"
   "-"
   "^"
   "*"
   "//"
   "/"
   "{"
   "}"
   "["
   "]"
   "("
   ")"
   ";"
   "."
   ","
   "Unknown"
   "message"


Rules useless in grammar

    3 newline: "newline"

    4 number: "Digit"
    5       | number "Digit"
    6       | "Digit" number
    7       | %empty

    8 word: "Letter"
    9     | word "Letter"
   10     | "Digit" word
   11     | %empty

   12 struct: "Struct" name newline variable-init "End of Struct"
   13       | "TYPEDEF" "Struct" name newline variable-init name "End of Struct"
   14       | struct struct
   15       | %empty

   16 function: "Function" name "(" parameters ")" newline function-main-body return-statement "End Function"
   17         | function function
   18         | %empty

   19 parameters: name
   20           | parameters "," name

   21 function-main-body: variable-init program-command

   22 return-statement: "Return" name ";"

   23 main-function: "Start Main" variable-init program-command "End Main"

   24 type-specifier: "Char"
   25               | "Int"

   26 variable-init: "Vars" type-specifier identifier ";"
   27              | variable-init variable-init
   28              | %empty

   29 identifier: name
   30           | identifier identifier

   31 program-command: assign-statement
   32                | iteration-statement
   33                | selection-statement
   34                | print-statement
   35                | break-statement
   36                | line-comment
   37                | program-command program-command
   38                | %empty

   39 assign-statement: name "=" statement ";"

   40 statement: word
   41          | number
   42          | statement statement
   43          | "(" statement ")"
   44          | statement unary-operator statement

   45 unary-operator: "/"
   46               | "*"
   47               | "+"
   48               | "-"
   49               | "^"

   50 condition: word logical-expression word
   51          | number logical-expression number
   52          | number logical-expression word
   53          | word logical-expression number

   54 logical-expression: ">"
   55                   | "<"
   56                   | "=="
   57                   | "!="
   58                   | "AND"
   59                   | "OR"

   60 iteration-statement: "While" "(" condition ")" program-command "End While"
   61                    | "For" "(" condition "To" number "Step" number ")" program-command "End For"

   62 selection-statement: "If" "(" condition ")" "Then" program-command elseif else "End if"
   63                    | "Switch" "(" condition ")" case default "{" "Default" ":" program-command "}" "End Switch"

   64 elseif: "Else If" program-command elseif
   65       | %empty

   66 else: "Else" program-command
   67     | %empty

   68 case: "Case" "(" condition ")" program-command case
   69     | %empty

   70 default: "Default" ":" program-command
   71        | %empty

   72 print-statement: "Print" "(" "message" val ")" ";"

   73 message: word
   74        | word message
   75        | %empty

   76 val: val
   77    | %empty

   78 break-statement: "Break" ";"

   79 line-comment: "//" word
   80             | %empty

   81 multiline-comment: %empty

   82 comment: message newline comment
   83        | message
   84        | %empty


Grammar

    0 $accept: program "EOF"

    1 program: "Program1" name "newline"

    2 name: "ID"


Terminals, with rules where they appear

"EOF" (0) 0
error (256)
"Space" (258)
"ID" (259) 2
"Letter" (260)
"Program1" (261) 1
"Vars" (262)
"Char" (263)
"Int" (264)
"Struct" (265)
"End of Struct" (266)
"TYPEDEF" (267)
"Print" (268)
"If" (269)
"Then" (270)
"End if" (271)
"While" (272)
"End While" (273)
"Else" (274)
"Else If" (275)
"For" (276)
"To" (277)
"Step" (278)
"End For" (279)
"Start Main" (280)
"End Main" (281)
"Function" (282)
"End Function" (283)
"Return" (284)
"Switch" (285)
"Case" (286)
"Default" (287)
"End Switch" (288)
"Break" (289)
"AND" (290)
"OR" (291)
"Digit" (292)
">" (293)
"=" (294)
":" (295)
"<" (296)
"==" (297)
"!=" (298)
"+" (299)
"-" (300)
"^" (301)
"*" (302)
"//" (303)
"/" (304)
"{" (305)
"}" (306)
"[" (307)
"]" (308)
"(" (309)
")" (310)
";" (311)
"." (312)
"," (313)
"newline" (314) 1
"Unknown" (315)
"message" (316)


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
program (63)
    on left: 1, on right: 0
name (64)
    on left: 2, on right: 1


State 0

    0 $accept: . program "EOF"

    "Program1"  shift, and go to state 1

    program  go to state 2


State 1

    1 program: "Program1" . name "newline"

    "ID"  shift, and go to state 3

    name  go to state 4


State 2

    0 $accept: program . "EOF"

    "EOF"  shift, and go to state 5


State 3

    2 name: "ID" .

    $default  reduce using rule 2 (name)


State 4

    1 program: "Program1" name . "newline"

    "newline"  shift, and go to state 6


State 5

    0 $accept: program "EOF" .

    $default  accept


State 6

    1 program: "Program1" name "newline" .

    $default  reduce using rule 1 (program)
