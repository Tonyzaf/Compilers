<letter> : {a-z} | {A-Z}

<digit> : {0-9}

<word> : <letter> | <digit>  | <word> <letter> | <word> <digit>

<name> : <letter>  | <word> <letter> | <word> <digit>

<newline> : \r\n 

<program> : PROGRAM <name> <newline> <struct> <function> <main-function>

<struct> : STRUCT <name> <newline> <variable-init> ENDSTRUCT
         | TYPEDEF STRUCT <name> <newline> <variable-init> <name> ENDSTRUCT
         | <struct> <struct>
         | %empty

<function> : FUNCTION <name> (<parameters>) <newline>  <function-main-body> <return-statement> END_FUNCTION
           | <function> <function>
           | %empty

<parameters> : <name> 
             | <parameters> , <name>

<function-main-body> : <variable-init> <program-command>

<return-statement> : RETURN <word> ;

<main-function> : STARTMAIN <variable-init> <program-command> ENDMAIN 

<type-specifier> : CHAR
                 | INTEGER

<variable-init> : VARS <type-specifier> <identifier>;
                | <variable-init> <variable-init>
                | %empty

<identifier> : <name> | <identifier>, <identifier> | <name>\[{1-9}<number>\]
                
<number> : <digit> <number>
         | <digit>
         | %empty

<program-command> : <assign-statement>
                  | <iteration-statement>
                  | <selection-statement>
                  | <print-statement>
                  | <break-statement>
                  | <line-comment>
                  | <program-command> <program-command>
                  | %empty

<assign-statement> : <name> = <statement>;

<statement> : <word> 
            | <digit> 
            | <statement> <statement> 
            | (<statement>)
            | <statement> <unary-operator> <statement>
              
<unary-operator> : /
                 | *
                 | +
                 | -
                 | ^
                  
<condition> : <word> <logical-expression> <word> 
            | <digit> <logical-expression> <digit>
            | <digit> <logical-expression> <word> 
            | <word> <logical-expression> <digit>

<logical-expression> : >
                     | <
                     | ==
                     | !=
                     | AND 
                     | OR

<iteration-statement> : WHILE ( <condition> ) <program-command>+ ENDWHILE
                      | FOR ( <condition> TO {1-9} <number> STEP {1-9} <number> ) <program-command> ENDFOR

<selection-statement> : IF ( <condition> ) THEN <program-command> <elseif> <else> ENDIF
                      | SWITCH ( <condition> ) <case> <default>{DEFAULT : <program-command>+}? ENDSWITCH

<elseif> : ELSEIF  <program-command> <elseif>
         | %empty

<else> : ELSE <program-command>
       | %empty

<case> : CASE ( <condition> ) <program-command> <case>   
       | %empty    

<default> : DEFAULT : <program-command> 
          | %empty

<print-statement> : PRINT ("<message>" <val>) ;

<message> : <word> 
          | <word> <message>  
          | %empty

<val> : , [ <word> ] <val>
      | %empty

<break-statement> : BREAK;

<line-comment> : ^%[ a-zA-Z0-9 ]*

<multiline-comment> :  /* <comment> */

<comment> : <message> <newline> <comment>
          | <message>
          | %empty

