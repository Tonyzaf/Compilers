Terminals unused in grammar

    "{"
    "}"
    "."


State 5 conflicts: 1 shift/reduce
State 7 conflicts: 3 shift/reduce, 2 reduce/reduce
State 13 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce, 16 reduce/reduce
State 21 conflicts: 2 shift/reduce
State 25 conflicts: 1 shift/reduce
State 29 conflicts: 1 shift/reduce, 2 reduce/reduce
State 34 conflicts: 2 shift/reduce
State 35 conflicts: 1 shift/reduce
State 37 conflicts: 1 shift/reduce
State 40 conflicts: 2 shift/reduce
State 42 conflicts: 10 shift/reduce, 10 reduce/reduce
State 69 conflicts: 1 shift/reduce
State 79 conflicts: 3 reduce/reduce
State 91 conflicts: 10 shift/reduce, 10 reduce/reduce
State 140 conflicts: 9 shift/reduce
State 146 conflicts: 5 shift/reduce
State 147 conflicts: 5 shift/reduce
State 148 conflicts: 5 shift/reduce
State 149 conflicts: 5 shift/reduce
State 155 conflicts: 9 shift/reduce
State 170 conflicts: 1 shift/reduce
State 183 conflicts: 9 shift/reduce
State 184 conflicts: 9 shift/reduce
State 186 conflicts: 1 shift/reduce
State 187 conflicts: 9 shift/reduce
State 189 conflicts: 9 shift/reduce
State 193 conflicts: 9 shift/reduce
State 201 conflicts: 9 shift/reduce


Grammar

    0 $accept: program "EOF"

    1 program: "PROGRAM" "ID" "NEW LINE" varksm struct function main "EOF"

    2 struct: struct_type struct "NEW LINE"
    3       | %empty

    4 struct_type: "STRUCT" "ID" "NEW LINE" varksm "ID" "END STRUCT"
    5            | "TYPE DEF" "STRUCT" "ID" "NEW LINE" varksm "ID" "END STRUCT"

    6 function: "FUNCTION" "ID" "(" var ")" "NEW LINE" varksm functionbody return "END FUNCTION" "NEW LINE"
    7         | function function
    8         | %empty

    9 varksm: "VARS" vartype var ";" "NEW LINE"
   10       | varksm varksm
   11       | %empty

   12 vartype: "CHAR"
   13        | "INTEGER"

   14 var: "ID"
   15    | "ID" "," var
   16    | %empty

   17 functionbody: command
   18             | functionbody command
   19             | %empty

   20 command: assignment "NEW LINE"
   21        | loop "NEW LINE"
   22        | check "NEW LINE"
   23        | print "NEW LINE"
   24        | break "NEW LINE"
   25        | comment "NEW LINE"
   26        | mcomment "NEW LINE"

   27 assignment: "ID" "=" expression ";"

   28 expression: literal
   29           | "ID" "(" var ")"
   30           | "ID" "[" "NUMBER" "]"
   31           | operation

   32 operation: literal noperator literal
   33          | operation noperator operation
   34          | operation noperator literal
   35          | literal noperator operation
   36          | "(" operation ")"

   37 literal: "NUMBER"
   38        | "ID"

   39 noperator: "+"
   40          | "-"
   41          | "^"
   42          | "*"
   43          | "/"

   44 loop: forloop
   45     | whileloop

   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody "END FOR"

   47 whileloop: "WHILE" "(" condition ")" "NEW LINE" functionbody "END WHILE"

   48 condition: literal operators literal

   49 operators: loperator
   50          | coperator

   51 loperator: "<"
   52          | ">"
   53          | "=="
   54          | "!="

   55 coperator: "AND"
   56          | "OR"

   57 check: checkif
   58      | checkcase

   59 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody "ENDIF"
   60        | "IF" "(" condition ")" "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" "(" condition ")" "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF"

   62 elseif: "ELSE IF" "NEW LINE" functionbody
   63       | elseif elseif

   64 checkcase: "SWITCH" "(" expression ")" "NEW LINE" case default "END SWITCH"

   65 case: "CASE" "(" expression ")" ":" "NEW LINE" functionbody
   66     | case case

   67 default: "DEFAULT" ":" "NEW LINE" functionbody
   68        | %empty

   69 print: "PRINT" "(" "\"" message "\"" "," "[" var "]" ")" ";"

   70 message: literal
   71        | literal message
   72        | %empty

   73 break: "BREAK" ";"

   74 comment: "%" message

   75 mcomment: "/" "*" messages "*" "/"

   76 messages: message
   77         | message "NEW LINE" messages

   78 return: "RETURN" literal ";" "NEW LINE"

   79 main: "START MAIN" "NEW LINE" varksm functionbody "END MAIN"


Terminals, with rules where they appear

    "EOF" (0) 0 1
    error (256)
    "PROGRAM" (258) 1
    "VARS" (259) 9
    "CHAR" (260) 12
    "INTEGER" (261) 13
    "STRUCT" (262) 4 5
    "END STRUCT" (263) 4 5
    "TYPE DEF" (264) 5
    "PRINT" (265) 69
    "IF" (266) 59 60 61
    "ENDIF" (267) 59 60 61
    "WHILE" (268) 47
    "END WHILE" (269) 47
    "ELSE" (270) 60 61
    "ELSE IF" (271) 62
    "FOR" (272) 46
    "TO" (273) 46
    "STEP" (274) 46
    "END FOR" (275) 46
    "START MAIN" (276) 79
    "END MAIN" (277) 79
    "FUNCTION" (278) 6
    "END FUNCTION" (279) 6
    "RETURN" (280) 78
    "SWITCH" (281) 64
    "CASE" (282) 65
    "DEFAULT" (283) 67
    "END SWITCH" (284) 64
    "BREAK" (285) 73
    "AND" (286) 55
    "OR" (287) 56
    ">" (288) 52
    "<" (289) 51
    "==" (290) 53
    "!=" (291) 54
    "+" (292) 39
    "-" (293) 40
    "^" (294) 41
    "*" (295) 42 75
    "/" (296) 43 75
    "{" (297)
    "}" (298)
    "[" (299) 30 69
    "]" (300) 30 69
    "(" (301) 6 29 36 47 59 60 61 64 65 69
    ")" (302) 6 29 36 47 59 60 61 64 65 69
    ";" (303) 9 27 69 73 78
    ":" (304) 65 67
    "." (305)
    "," (306) 15 69
    "\"" (307) 69
    "NEW LINE" (308) 1 2 4 5 6 9 20 21 22 23 24 25 26 46 47 59 60 61 62 64 65 67 77 78 79
    "%" (309) 74
    "THEN" (310) 59 60 61
    "=" (311) 27 46
    "ID" (312) 1 4 5 6 14 15 27 29 30 38 46
    "NUMBER" (313) 30 37 46


Nonterminals, with rules where they appear

    $accept (59)
        on left: 0
    program (60)
        on left: 1
        on right: 0
    struct (61)
        on left: 2 3
        on right: 1 2
    struct_type (62)
        on left: 4 5
        on right: 2
    function (63)
        on left: 6 7 8
        on right: 1 7
    varksm (64)
        on left: 9 10 11
        on right: 1 4 5 6 10 79
    vartype (65)
        on left: 12 13
        on right: 9
    var (66)
        on left: 14 15 16
        on right: 6 9 15 29 69
    functionbody (67)
        on left: 17 18 19
        on right: 6 18 46 47 59 60 61 62 65 67 79
    command (68)
        on left: 20 21 22 23 24 25 26
        on right: 17 18
    assignment (69)
        on left: 27
        on right: 20
    expression (70)
        on left: 28 29 30 31
        on right: 27 64 65
    operation (71)
        on left: 32 33 34 35 36
        on right: 31 33 34 35 36
    literal (72)
        on left: 37 38
        on right: 28 32 34 35 48 70 71 78
    noperator (73)
        on left: 39 40 41 42 43
        on right: 32 33 34 35
    loop (74)
        on left: 44 45
        on right: 21
    forloop (75)
        on left: 46
        on right: 44
    whileloop (76)
        on left: 47
        on right: 45
    condition (77)
        on left: 48
        on right: 47 59 60 61
    operators (78)
        on left: 49 50
        on right: 48
    loperator (79)
        on left: 51 52 53 54
        on right: 49
    coperator (80)
        on left: 55 56
        on right: 50
    check (81)
        on left: 57 58
        on right: 22
    checkif (82)
        on left: 59 60 61
        on right: 57
    elseif (83)
        on left: 62 63
        on right: 61 63
    checkcase (84)
        on left: 64
        on right: 58
    case (85)
        on left: 65 66
        on right: 64 66
    default (86)
        on left: 67 68
        on right: 64
    print (87)
        on left: 69
        on right: 23
    message (88)
        on left: 70 71 72
        on right: 69 71 74 76 77
    break (89)
        on left: 73
        on right: 24
    comment (90)
        on left: 74
        on right: 25
    mcomment (91)
        on left: 75
        on right: 26
    messages (92)
        on left: 76 77
        on right: 75 77
    return (93)
        on left: 78
        on right: 6
    main (94)
        on left: 79
        on right: 1


State 0

    0 $accept: . program "EOF"

    "PROGRAM"  shift, and go to state 1

    program  go to state 2


State 1

    1 program: "PROGRAM" . "ID" "NEW LINE" varksm struct function main "EOF"

    "ID"  shift, and go to state 3


State 2

    0 $accept: program . "EOF"

    "EOF"  shift, and go to state 4


State 3

    1 program: "PROGRAM" "ID" . "NEW LINE" varksm struct function main "EOF"

    "NEW LINE"  shift, and go to state 5


State 4

    0 $accept: program "EOF" .

    $default  accept


State 5

    1 program: "PROGRAM" "ID" "NEW LINE" . varksm struct function main "EOF"

    "VARS"  shift, and go to state 6

    "VARS"    [reduce using rule 11 (varksm)]
    $default  reduce using rule 11 (varksm)

    varksm  go to state 7


State 6

    9 varksm: "VARS" . vartype var ";" "NEW LINE"

    "CHAR"     shift, and go to state 8
    "INTEGER"  shift, and go to state 9

    vartype  go to state 10


State 7

    1 program: "PROGRAM" "ID" "NEW LINE" varksm . struct function main "EOF"
   10 varksm: varksm . varksm

    "VARS"      shift, and go to state 6
    "STRUCT"    shift, and go to state 11
    "TYPE DEF"  shift, and go to state 12

    "VARS"        [reduce using rule 11 (varksm)]
    "STRUCT"      [reduce using rule 11 (varksm)]
    "TYPE DEF"    [reduce using rule 11 (varksm)]
    "START MAIN"  reduce using rule 3 (struct)
    "START MAIN"  [reduce using rule 11 (varksm)]
    "FUNCTION"    reduce using rule 3 (struct)
    "FUNCTION"    [reduce using rule 11 (varksm)]
    $default      reduce using rule 3 (struct)

    struct       go to state 13
    struct_type  go to state 14
    varksm       go to state 15


State 8

   12 vartype: "CHAR" .

    $default  reduce using rule 12 (vartype)


State 9

   13 vartype: "INTEGER" .

    $default  reduce using rule 13 (vartype)


State 10

    9 varksm: "VARS" vartype . var ";" "NEW LINE"

    "ID"  shift, and go to state 16

    $default  reduce using rule 16 (var)

    var  go to state 17


State 11

    4 struct_type: "STRUCT" . "ID" "NEW LINE" varksm "ID" "END STRUCT"

    "ID"  shift, and go to state 18


State 12

    5 struct_type: "TYPE DEF" . "STRUCT" "ID" "NEW LINE" varksm "ID" "END STRUCT"

    "STRUCT"  shift, and go to state 19


State 13

    1 program: "PROGRAM" "ID" "NEW LINE" varksm struct . function main "EOF"

    "FUNCTION"  shift, and go to state 20

    "FUNCTION"  [reduce using rule 8 (function)]
    $default    reduce using rule 8 (function)

    function  go to state 21


State 14

    2 struct: struct_type . struct "NEW LINE"

    "STRUCT"    shift, and go to state 11
    "TYPE DEF"  shift, and go to state 12

    $default  reduce using rule 3 (struct)

    struct       go to state 22
    struct_type  go to state 14


State 15

   10 varksm: varksm . varksm
   10       | varksm varksm .

    "VARS"  shift, and go to state 6

    "VARS"        [reduce using rule 10 (varksm)]
    "VARS"        [reduce using rule 11 (varksm)]
    "STRUCT"      reduce using rule 10 (varksm)
    "STRUCT"      [reduce using rule 11 (varksm)]
    "TYPE DEF"    reduce using rule 10 (varksm)
    "TYPE DEF"    [reduce using rule 11 (varksm)]
    "PRINT"       reduce using rule 10 (varksm)
    "PRINT"       [reduce using rule 11 (varksm)]
    "IF"          reduce using rule 10 (varksm)
    "IF"          [reduce using rule 11 (varksm)]
    "WHILE"       reduce using rule 10 (varksm)
    "WHILE"       [reduce using rule 11 (varksm)]
    "FOR"         reduce using rule 10 (varksm)
    "FOR"         [reduce using rule 11 (varksm)]
    "START MAIN"  reduce using rule 10 (varksm)
    "START MAIN"  [reduce using rule 11 (varksm)]
    "END MAIN"    reduce using rule 10 (varksm)
    "END MAIN"    [reduce using rule 11 (varksm)]
    "FUNCTION"    reduce using rule 10 (varksm)
    "FUNCTION"    [reduce using rule 11 (varksm)]
    "RETURN"      reduce using rule 10 (varksm)
    "RETURN"      [reduce using rule 11 (varksm)]
    "SWITCH"      reduce using rule 10 (varksm)
    "SWITCH"      [reduce using rule 11 (varksm)]
    "BREAK"       reduce using rule 10 (varksm)
    "BREAK"       [reduce using rule 11 (varksm)]
    "/"           reduce using rule 10 (varksm)
    "/"           [reduce using rule 11 (varksm)]
    "%"           reduce using rule 10 (varksm)
    "%"           [reduce using rule 11 (varksm)]
    "ID"          reduce using rule 10 (varksm)
    "ID"          [reduce using rule 11 (varksm)]
    $default      reduce using rule 10 (varksm)

    varksm  go to state 15


State 16

   14 var: "ID" .
   15    | "ID" . "," var

    ","  shift, and go to state 23

    $default  reduce using rule 14 (var)


State 17

    9 varksm: "VARS" vartype var . ";" "NEW LINE"

    ";"  shift, and go to state 24


State 18

    4 struct_type: "STRUCT" "ID" . "NEW LINE" varksm "ID" "END STRUCT"

    "NEW LINE"  shift, and go to state 25


State 19

    5 struct_type: "TYPE DEF" "STRUCT" . "ID" "NEW LINE" varksm "ID" "END STRUCT"

    "ID"  shift, and go to state 26


State 20

    6 function: "FUNCTION" . "ID" "(" var ")" "NEW LINE" varksm functionbody return "END FUNCTION" "NEW LINE"

    "ID"  shift, and go to state 27


State 21

    1 program: "PROGRAM" "ID" "NEW LINE" varksm struct function . main "EOF"
    7 function: function . function

    "START MAIN"  shift, and go to state 28
    "FUNCTION"    shift, and go to state 20

    "START MAIN"  [reduce using rule 8 (function)]
    "FUNCTION"    [reduce using rule 8 (function)]

    function  go to state 29
    main      go to state 30


State 22

    2 struct: struct_type struct . "NEW LINE"

    "NEW LINE"  shift, and go to state 31


State 23

   15 var: "ID" "," . var

    "ID"  shift, and go to state 16

    $default  reduce using rule 16 (var)

    var  go to state 32


State 24

    9 varksm: "VARS" vartype var ";" . "NEW LINE"

    "NEW LINE"  shift, and go to state 33


State 25

    4 struct_type: "STRUCT" "ID" "NEW LINE" . varksm "ID" "END STRUCT"

    "VARS"  shift, and go to state 6

    "VARS"    [reduce using rule 11 (varksm)]
    $default  reduce using rule 11 (varksm)

    varksm  go to state 34


State 26

    5 struct_type: "TYPE DEF" "STRUCT" "ID" . "NEW LINE" varksm "ID" "END STRUCT"

    "NEW LINE"  shift, and go to state 35


State 27

    6 function: "FUNCTION" "ID" . "(" var ")" "NEW LINE" varksm functionbody return "END FUNCTION" "NEW LINE"

    "("  shift, and go to state 36


State 28

   79 main: "START MAIN" . "NEW LINE" varksm functionbody "END MAIN"

    "NEW LINE"  shift, and go to state 37


State 29

    7 function: function . function
    7         | function function .

    "FUNCTION"  shift, and go to state 20

    "START MAIN"  reduce using rule 7 (function)
    "START MAIN"  [reduce using rule 8 (function)]
    "FUNCTION"    [reduce using rule 7 (function)]
    "FUNCTION"    [reduce using rule 8 (function)]
    $default      reduce using rule 7 (function)

    function  go to state 29


State 30

    1 program: "PROGRAM" "ID" "NEW LINE" varksm struct function main . "EOF"

    "EOF"  shift, and go to state 38


State 31

    2 struct: struct_type struct "NEW LINE" .

    $default  reduce using rule 2 (struct)


State 32

   15 var: "ID" "," var .

    $default  reduce using rule 15 (var)


State 33

    9 varksm: "VARS" vartype var ";" "NEW LINE" .

    $default  reduce using rule 9 (varksm)


State 34

    4 struct_type: "STRUCT" "ID" "NEW LINE" varksm . "ID" "END STRUCT"
   10 varksm: varksm . varksm

    "VARS"  shift, and go to state 6
    "ID"    shift, and go to state 39

    "VARS"  [reduce using rule 11 (varksm)]
    "ID"    [reduce using rule 11 (varksm)]

    varksm  go to state 15


State 35

    5 struct_type: "TYPE DEF" "STRUCT" "ID" "NEW LINE" . varksm "ID" "END STRUCT"

    "VARS"  shift, and go to state 6

    "VARS"    [reduce using rule 11 (varksm)]
    $default  reduce using rule 11 (varksm)

    varksm  go to state 40


State 36

    6 function: "FUNCTION" "ID" "(" . var ")" "NEW LINE" varksm functionbody return "END FUNCTION" "NEW LINE"

    "ID"  shift, and go to state 16

    $default  reduce using rule 16 (var)

    var  go to state 41


State 37

   79 main: "START MAIN" "NEW LINE" . varksm functionbody "END MAIN"

    "VARS"  shift, and go to state 6

    "VARS"    [reduce using rule 11 (varksm)]
    $default  reduce using rule 11 (varksm)

    varksm  go to state 42


State 38

    1 program: "PROGRAM" "ID" "NEW LINE" varksm struct function main "EOF" .

    $default  reduce using rule 1 (program)


State 39

    4 struct_type: "STRUCT" "ID" "NEW LINE" varksm "ID" . "END STRUCT"

    "END STRUCT"  shift, and go to state 43


State 40

    5 struct_type: "TYPE DEF" "STRUCT" "ID" "NEW LINE" varksm . "ID" "END STRUCT"
   10 varksm: varksm . varksm

    "VARS"  shift, and go to state 6
    "ID"    shift, and go to state 44

    "VARS"  [reduce using rule 11 (varksm)]
    "ID"    [reduce using rule 11 (varksm)]

    varksm  go to state 15


State 41

    6 function: "FUNCTION" "ID" "(" var . ")" "NEW LINE" varksm functionbody return "END FUNCTION" "NEW LINE"

    ")"  shift, and go to state 45


State 42

   10 varksm: varksm . varksm
   79 main: "START MAIN" "NEW LINE" varksm . functionbody "END MAIN"

    "VARS"    shift, and go to state 6
    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "VARS"      [reduce using rule 11 (varksm)]
    "PRINT"     [reduce using rule 11 (varksm)]
    "PRINT"     [reduce using rule 19 (functionbody)]
    "IF"        [reduce using rule 11 (varksm)]
    "IF"        [reduce using rule 19 (functionbody)]
    "WHILE"     [reduce using rule 11 (varksm)]
    "WHILE"     [reduce using rule 19 (functionbody)]
    "FOR"       [reduce using rule 11 (varksm)]
    "FOR"       [reduce using rule 19 (functionbody)]
    "END MAIN"  reduce using rule 11 (varksm)
    "END MAIN"  [reduce using rule 19 (functionbody)]
    "SWITCH"    [reduce using rule 11 (varksm)]
    "SWITCH"    [reduce using rule 19 (functionbody)]
    "BREAK"     [reduce using rule 11 (varksm)]
    "BREAK"     [reduce using rule 19 (functionbody)]
    "/"         [reduce using rule 11 (varksm)]
    "/"         [reduce using rule 19 (functionbody)]
    "%"         [reduce using rule 11 (varksm)]
    "%"         [reduce using rule 19 (functionbody)]
    "ID"        [reduce using rule 11 (varksm)]
    "ID"        [reduce using rule 19 (functionbody)]
    $default    reduce using rule 11 (varksm)

    varksm        go to state 15
    functionbody  go to state 55
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 43

    4 struct_type: "STRUCT" "ID" "NEW LINE" varksm "ID" "END STRUCT" .

    $default  reduce using rule 4 (struct_type)


State 44

    5 struct_type: "TYPE DEF" "STRUCT" "ID" "NEW LINE" varksm "ID" . "END STRUCT"

    "END STRUCT"  shift, and go to state 68


State 45

    6 function: "FUNCTION" "ID" "(" var ")" . "NEW LINE" varksm functionbody return "END FUNCTION" "NEW LINE"

    "NEW LINE"  shift, and go to state 69


State 46

   69 print: "PRINT" . "(" "\"" message "\"" "," "[" var "]" ")" ";"

    "("  shift, and go to state 70


State 47

   59 checkif: "IF" . "(" condition ")" "THEN" "NEW LINE" functionbody "ENDIF"
   60        | "IF" . "(" condition ")" "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" . "(" condition ")" "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF"

    "("  shift, and go to state 71


State 48

   47 whileloop: "WHILE" . "(" condition ")" "NEW LINE" functionbody "END WHILE"

    "("  shift, and go to state 72


State 49

   46 forloop: "FOR" . "ID" "=" "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody "END FOR"

    "ID"  shift, and go to state 73


State 50

   64 checkcase: "SWITCH" . "(" expression ")" "NEW LINE" case default "END SWITCH"

    "("  shift, and go to state 74


State 51

   73 break: "BREAK" . ";"

    ";"  shift, and go to state 75


State 52

   75 mcomment: "/" . "*" messages "*" "/"

    "*"  shift, and go to state 76


State 53

   74 comment: "%" . message

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    $default  reduce using rule 72 (message)

    literal  go to state 79
    message  go to state 80


State 54

   27 assignment: "ID" . "=" expression ";"

    "="  shift, and go to state 81


State 55

   18 functionbody: functionbody . command
   79 main: "START MAIN" "NEW LINE" varksm functionbody . "END MAIN"

    "PRINT"     shift, and go to state 46
    "IF"        shift, and go to state 47
    "WHILE"     shift, and go to state 48
    "FOR"       shift, and go to state 49
    "END MAIN"  shift, and go to state 82
    "SWITCH"    shift, and go to state 50
    "BREAK"     shift, and go to state 51
    "/"         shift, and go to state 52
    "%"         shift, and go to state 53
    "ID"        shift, and go to state 54

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 56

   17 functionbody: command .

    $default  reduce using rule 17 (functionbody)


State 57

   20 command: assignment . "NEW LINE"

    "NEW LINE"  shift, and go to state 84


State 58

   21 command: loop . "NEW LINE"

    "NEW LINE"  shift, and go to state 85


State 59

   44 loop: forloop .

    $default  reduce using rule 44 (loop)


State 60

   45 loop: whileloop .

    $default  reduce using rule 45 (loop)


State 61

   22 command: check . "NEW LINE"

    "NEW LINE"  shift, and go to state 86


State 62

   57 check: checkif .

    $default  reduce using rule 57 (check)


State 63

   58 check: checkcase .

    $default  reduce using rule 58 (check)


State 64

   23 command: print . "NEW LINE"

    "NEW LINE"  shift, and go to state 87


State 65

   24 command: break . "NEW LINE"

    "NEW LINE"  shift, and go to state 88


State 66

   25 command: comment . "NEW LINE"

    "NEW LINE"  shift, and go to state 89


State 67

   26 command: mcomment . "NEW LINE"

    "NEW LINE"  shift, and go to state 90


State 68

    5 struct_type: "TYPE DEF" "STRUCT" "ID" "NEW LINE" varksm "ID" "END STRUCT" .

    $default  reduce using rule 5 (struct_type)


State 69

    6 function: "FUNCTION" "ID" "(" var ")" "NEW LINE" . varksm functionbody return "END FUNCTION" "NEW LINE"

    "VARS"  shift, and go to state 6

    "VARS"    [reduce using rule 11 (varksm)]
    $default  reduce using rule 11 (varksm)

    varksm  go to state 91


State 70

   69 print: "PRINT" "(" . "\"" message "\"" "," "[" var "]" ")" ";"

    "\""  shift, and go to state 92


State 71

   59 checkif: "IF" "(" . condition ")" "THEN" "NEW LINE" functionbody "ENDIF"
   60        | "IF" "(" . condition ")" "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" "(" . condition ")" "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF"

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    literal    go to state 93
    condition  go to state 94


State 72

   47 whileloop: "WHILE" "(" . condition ")" "NEW LINE" functionbody "END WHILE"

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    literal    go to state 93
    condition  go to state 95


State 73

   46 forloop: "FOR" "ID" . "=" "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody "END FOR"

    "="  shift, and go to state 96


State 74

   64 checkcase: "SWITCH" "(" . expression ")" "NEW LINE" case default "END SWITCH"

    "("       shift, and go to state 97
    "ID"      shift, and go to state 98
    "NUMBER"  shift, and go to state 78

    expression  go to state 99
    operation   go to state 100
    literal     go to state 101


State 75

   73 break: "BREAK" ";" .

    $default  reduce using rule 73 (break)


State 76

   75 mcomment: "/" "*" . messages "*" "/"

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    $default  reduce using rule 72 (message)

    literal   go to state 79
    message   go to state 102
    messages  go to state 103


State 77

   38 literal: "ID" .

    $default  reduce using rule 38 (literal)


State 78

   37 literal: "NUMBER" .

    $default  reduce using rule 37 (literal)


State 79

   70 message: literal .
   71        | literal . message

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    "*"         reduce using rule 70 (message)
    "*"         [reduce using rule 72 (message)]
    "\""        reduce using rule 70 (message)
    "\""        [reduce using rule 72 (message)]
    "NEW LINE"  reduce using rule 70 (message)
    "NEW LINE"  [reduce using rule 72 (message)]
    $default    reduce using rule 70 (message)

    literal  go to state 79
    message  go to state 104


State 80

   74 comment: "%" message .

    $default  reduce using rule 74 (comment)


State 81

   27 assignment: "ID" "=" . expression ";"

    "("       shift, and go to state 97
    "ID"      shift, and go to state 98
    "NUMBER"  shift, and go to state 78

    expression  go to state 105
    operation   go to state 100
    literal     go to state 101


State 82

   79 main: "START MAIN" "NEW LINE" varksm functionbody "END MAIN" .

    $default  reduce using rule 79 (main)


State 83

   18 functionbody: functionbody command .

    $default  reduce using rule 18 (functionbody)


State 84

   20 command: assignment "NEW LINE" .

    $default  reduce using rule 20 (command)


State 85

   21 command: loop "NEW LINE" .

    $default  reduce using rule 21 (command)


State 86

   22 command: check "NEW LINE" .

    $default  reduce using rule 22 (command)


State 87

   23 command: print "NEW LINE" .

    $default  reduce using rule 23 (command)


State 88

   24 command: break "NEW LINE" .

    $default  reduce using rule 24 (command)


State 89

   25 command: comment "NEW LINE" .

    $default  reduce using rule 25 (command)


State 90

   26 command: mcomment "NEW LINE" .

    $default  reduce using rule 26 (command)


State 91

    6 function: "FUNCTION" "ID" "(" var ")" "NEW LINE" varksm . functionbody return "END FUNCTION" "NEW LINE"
   10 varksm: varksm . varksm

    "VARS"    shift, and go to state 6
    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "VARS"    [reduce using rule 11 (varksm)]
    "PRINT"   [reduce using rule 11 (varksm)]
    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 11 (varksm)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 11 (varksm)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 11 (varksm)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "RETURN"  reduce using rule 11 (varksm)
    "RETURN"  [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 11 (varksm)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 11 (varksm)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 11 (varksm)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 11 (varksm)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 11 (varksm)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 11 (varksm)

    varksm        go to state 15
    functionbody  go to state 106
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 92

   69 print: "PRINT" "(" "\"" . message "\"" "," "[" var "]" ")" ";"

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    $default  reduce using rule 72 (message)

    literal  go to state 79
    message  go to state 107


State 93

   48 condition: literal . operators literal

    "AND"  shift, and go to state 108
    "OR"   shift, and go to state 109
    ">"    shift, and go to state 110
    "<"    shift, and go to state 111
    "=="   shift, and go to state 112
    "!="   shift, and go to state 113

    operators  go to state 114
    loperator  go to state 115
    coperator  go to state 116


State 94

   59 checkif: "IF" "(" condition . ")" "THEN" "NEW LINE" functionbody "ENDIF"
   60        | "IF" "(" condition . ")" "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" "(" condition . ")" "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF"

    ")"  shift, and go to state 117


State 95

   47 whileloop: "WHILE" "(" condition . ")" "NEW LINE" functionbody "END WHILE"

    ")"  shift, and go to state 118


State 96

   46 forloop: "FOR" "ID" "=" . "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody "END FOR"

    "NUMBER"  shift, and go to state 119


State 97

   36 operation: "(" . operation ")"

    "("       shift, and go to state 97
    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    operation  go to state 120
    literal    go to state 121


State 98

   29 expression: "ID" . "(" var ")"
   30           | "ID" . "[" "NUMBER" "]"
   38 literal: "ID" .

    "["  shift, and go to state 122
    "("  shift, and go to state 123

    $default  reduce using rule 38 (literal)


State 99

   64 checkcase: "SWITCH" "(" expression . ")" "NEW LINE" case default "END SWITCH"

    ")"  shift, and go to state 124


State 100

   31 expression: operation .
   33 operation: operation . noperator operation
   34          | operation . noperator literal

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129

    $default  reduce using rule 31 (expression)

    noperator  go to state 130


State 101

   28 expression: literal .
   32 operation: literal . noperator literal
   35          | literal . noperator operation

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129

    $default  reduce using rule 28 (expression)

    noperator  go to state 131


State 102

   76 messages: message .
   77         | message . "NEW LINE" messages

    "NEW LINE"  shift, and go to state 132

    $default  reduce using rule 76 (messages)


State 103

   75 mcomment: "/" "*" messages . "*" "/"

    "*"  shift, and go to state 133


State 104

   71 message: literal message .

    $default  reduce using rule 71 (message)


State 105

   27 assignment: "ID" "=" expression . ";"

    ";"  shift, and go to state 134


State 106

    6 function: "FUNCTION" "ID" "(" var ")" "NEW LINE" varksm functionbody . return "END FUNCTION" "NEW LINE"
   18 functionbody: functionbody . command

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "RETURN"  shift, and go to state 135
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67
    return      go to state 136


State 107

   69 print: "PRINT" "(" "\"" message . "\"" "," "[" var "]" ")" ";"

    "\""  shift, and go to state 137


State 108

   55 coperator: "AND" .

    $default  reduce using rule 55 (coperator)


State 109

   56 coperator: "OR" .

    $default  reduce using rule 56 (coperator)


State 110

   52 loperator: ">" .

    $default  reduce using rule 52 (loperator)


State 111

   51 loperator: "<" .

    $default  reduce using rule 51 (loperator)


State 112

   53 loperator: "==" .

    $default  reduce using rule 53 (loperator)


State 113

   54 loperator: "!=" .

    $default  reduce using rule 54 (loperator)


State 114

   48 condition: literal operators . literal

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    literal  go to state 138


State 115

   49 operators: loperator .

    $default  reduce using rule 49 (operators)


State 116

   50 operators: coperator .

    $default  reduce using rule 50 (operators)


State 117

   59 checkif: "IF" "(" condition ")" . "THEN" "NEW LINE" functionbody "ENDIF"
   60        | "IF" "(" condition ")" . "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" "(" condition ")" . "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF"

    "THEN"  shift, and go to state 139


State 118

   47 whileloop: "WHILE" "(" condition ")" . "NEW LINE" functionbody "END WHILE"

    "NEW LINE"  shift, and go to state 140


State 119

   46 forloop: "FOR" "ID" "=" "NUMBER" . "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody "END FOR"

    "TO"  shift, and go to state 141


State 120

   33 operation: operation . noperator operation
   34          | operation . noperator literal
   36          | "(" operation . ")"

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129
    ")"  shift, and go to state 142

    noperator  go to state 130


State 121

   32 operation: literal . noperator literal
   35          | literal . noperator operation

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129

    noperator  go to state 131


State 122

   30 expression: "ID" "[" . "NUMBER" "]"

    "NUMBER"  shift, and go to state 143


State 123

   29 expression: "ID" "(" . var ")"

    "ID"  shift, and go to state 16

    $default  reduce using rule 16 (var)

    var  go to state 144


State 124

   64 checkcase: "SWITCH" "(" expression ")" . "NEW LINE" case default "END SWITCH"

    "NEW LINE"  shift, and go to state 145


State 125

   39 noperator: "+" .

    $default  reduce using rule 39 (noperator)


State 126

   40 noperator: "-" .

    $default  reduce using rule 40 (noperator)


State 127

   41 noperator: "^" .

    $default  reduce using rule 41 (noperator)


State 128

   42 noperator: "*" .

    $default  reduce using rule 42 (noperator)


State 129

   43 noperator: "/" .

    $default  reduce using rule 43 (noperator)


State 130

   33 operation: operation noperator . operation
   34          | operation noperator . literal

    "("       shift, and go to state 97
    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    operation  go to state 146
    literal    go to state 147


State 131

   32 operation: literal noperator . literal
   35          | literal noperator . operation

    "("       shift, and go to state 97
    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    operation  go to state 148
    literal    go to state 149


State 132

   77 messages: message "NEW LINE" . messages

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    $default  reduce using rule 72 (message)

    literal   go to state 79
    message   go to state 102
    messages  go to state 150


State 133

   75 mcomment: "/" "*" messages "*" . "/"

    "/"  shift, and go to state 151


State 134

   27 assignment: "ID" "=" expression ";" .

    $default  reduce using rule 27 (assignment)


State 135

   78 return: "RETURN" . literal ";" "NEW LINE"

    "ID"      shift, and go to state 77
    "NUMBER"  shift, and go to state 78

    literal  go to state 152


State 136

    6 function: "FUNCTION" "ID" "(" var ")" "NEW LINE" varksm functionbody return . "END FUNCTION" "NEW LINE"

    "END FUNCTION"  shift, and go to state 153


State 137

   69 print: "PRINT" "(" "\"" message "\"" . "," "[" var "]" ")" ";"

    ","  shift, and go to state 154


State 138

   48 condition: literal operators literal .

    $default  reduce using rule 48 (condition)


State 139

   59 checkif: "IF" "(" condition ")" "THEN" . "NEW LINE" functionbody "ENDIF"
   60        | "IF" "(" condition ")" "THEN" . "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" "(" condition ")" "THEN" . "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF"

    "NEW LINE"  shift, and go to state 155


State 140

   47 whileloop: "WHILE" "(" condition ")" "NEW LINE" . functionbody "END WHILE"

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 156
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 141

   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" . "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody "END FOR"

    "NUMBER"  shift, and go to state 157


State 142

   36 operation: "(" operation ")" .

    $default  reduce using rule 36 (operation)


State 143

   30 expression: "ID" "[" "NUMBER" . "]"

    "]"  shift, and go to state 158


State 144

   29 expression: "ID" "(" var . ")"

    ")"  shift, and go to state 159


State 145

   64 checkcase: "SWITCH" "(" expression ")" "NEW LINE" . case default "END SWITCH"

    "CASE"  shift, and go to state 160

    case  go to state 161


State 146

   33 operation: operation . noperator operation
   33          | operation noperator operation .
   34          | operation . noperator literal

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129

    "+"       [reduce using rule 33 (operation)]
    "-"       [reduce using rule 33 (operation)]
    "^"       [reduce using rule 33 (operation)]
    "*"       [reduce using rule 33 (operation)]
    "/"       [reduce using rule 33 (operation)]
    $default  reduce using rule 33 (operation)

    noperator  go to state 130


State 147

   32 operation: literal . noperator literal
   34          | operation noperator literal .
   35          | literal . noperator operation

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129

    "+"       [reduce using rule 34 (operation)]
    "-"       [reduce using rule 34 (operation)]
    "^"       [reduce using rule 34 (operation)]
    "*"       [reduce using rule 34 (operation)]
    "/"       [reduce using rule 34 (operation)]
    $default  reduce using rule 34 (operation)

    noperator  go to state 131


State 148

   33 operation: operation . noperator operation
   34          | operation . noperator literal
   35          | literal noperator operation .

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129

    "+"       [reduce using rule 35 (operation)]
    "-"       [reduce using rule 35 (operation)]
    "^"       [reduce using rule 35 (operation)]
    "*"       [reduce using rule 35 (operation)]
    "/"       [reduce using rule 35 (operation)]
    $default  reduce using rule 35 (operation)

    noperator  go to state 130


State 149

   32 operation: literal . noperator literal
   32          | literal noperator literal .
   35          | literal . noperator operation

    "+"  shift, and go to state 125
    "-"  shift, and go to state 126
    "^"  shift, and go to state 127
    "*"  shift, and go to state 128
    "/"  shift, and go to state 129

    "+"       [reduce using rule 32 (operation)]
    "-"       [reduce using rule 32 (operation)]
    "^"       [reduce using rule 32 (operation)]
    "*"       [reduce using rule 32 (operation)]
    "/"       [reduce using rule 32 (operation)]
    $default  reduce using rule 32 (operation)

    noperator  go to state 131


State 150

   77 messages: message "NEW LINE" messages .

    $default  reduce using rule 77 (messages)


State 151

   75 mcomment: "/" "*" messages "*" "/" .

    $default  reduce using rule 75 (mcomment)


State 152

   78 return: "RETURN" literal . ";" "NEW LINE"

    ";"  shift, and go to state 162


State 153

    6 function: "FUNCTION" "ID" "(" var ")" "NEW LINE" varksm functionbody return "END FUNCTION" . "NEW LINE"

    "NEW LINE"  shift, and go to state 163


State 154

   69 print: "PRINT" "(" "\"" message "\"" "," . "[" var "]" ")" ";"

    "["  shift, and go to state 164


State 155

   59 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" . functionbody "ENDIF"
   60        | "IF" "(" condition ")" "THEN" "NEW LINE" . functionbody "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" "(" condition ")" "THEN" "NEW LINE" . functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF"

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 165
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 156

   18 functionbody: functionbody . command
   47 whileloop: "WHILE" "(" condition ")" "NEW LINE" functionbody . "END WHILE"

    "PRINT"      shift, and go to state 46
    "IF"         shift, and go to state 47
    "WHILE"      shift, and go to state 48
    "END WHILE"  shift, and go to state 166
    "FOR"        shift, and go to state 49
    "SWITCH"     shift, and go to state 50
    "BREAK"      shift, and go to state 51
    "/"          shift, and go to state 52
    "%"          shift, and go to state 53
    "ID"         shift, and go to state 54

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 157

   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" "NUMBER" . "STEP" "NUMBER" "NEW LINE" functionbody "END FOR"

    "STEP"  shift, and go to state 167


State 158

   30 expression: "ID" "[" "NUMBER" "]" .

    $default  reduce using rule 30 (expression)


State 159

   29 expression: "ID" "(" var ")" .

    $default  reduce using rule 29 (expression)


State 160

   65 case: "CASE" . "(" expression ")" ":" "NEW LINE" functionbody

    "("  shift, and go to state 168


State 161

   64 checkcase: "SWITCH" "(" expression ")" "NEW LINE" case . default "END SWITCH"
   66 case: case . case

    "CASE"     shift, and go to state 160
    "DEFAULT"  shift, and go to state 169

    $default  reduce using rule 68 (default)

    case     go to state 170
    default  go to state 171


State 162

   78 return: "RETURN" literal ";" . "NEW LINE"

    "NEW LINE"  shift, and go to state 172


State 163

    6 function: "FUNCTION" "ID" "(" var ")" "NEW LINE" varksm functionbody return "END FUNCTION" "NEW LINE" .

    $default  reduce using rule 6 (function)


State 164

   69 print: "PRINT" "(" "\"" message "\"" "," "[" . var "]" ")" ";"

    "ID"  shift, and go to state 16

    $default  reduce using rule 16 (var)

    var  go to state 173


State 165

   18 functionbody: functionbody . command
   59 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody . "ENDIF"
   60        | "IF" "(" condition ")" "THEN" "NEW LINE" functionbody . "ELSE" "NEW LINE" functionbody "ENDIF"
   61        | "IF" "(" condition ")" "THEN" "NEW LINE" functionbody . elseif "ELSE" "NEW LINE" functionbody "ENDIF"

    "PRINT"    shift, and go to state 46
    "IF"       shift, and go to state 47
    "ENDIF"    shift, and go to state 174
    "WHILE"    shift, and go to state 48
    "ELSE"     shift, and go to state 175
    "ELSE IF"  shift, and go to state 176
    "FOR"      shift, and go to state 49
    "SWITCH"   shift, and go to state 50
    "BREAK"    shift, and go to state 51
    "/"        shift, and go to state 52
    "%"        shift, and go to state 53
    "ID"       shift, and go to state 54

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    elseif      go to state 177
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 166

   47 whileloop: "WHILE" "(" condition ")" "NEW LINE" functionbody "END WHILE" .

    $default  reduce using rule 47 (whileloop)


State 167

   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" "NUMBER" "STEP" . "NUMBER" "NEW LINE" functionbody "END FOR"

    "NUMBER"  shift, and go to state 178


State 168

   65 case: "CASE" "(" . expression ")" ":" "NEW LINE" functionbody

    "("       shift, and go to state 97
    "ID"      shift, and go to state 98
    "NUMBER"  shift, and go to state 78

    expression  go to state 179
    operation   go to state 100
    literal     go to state 101


State 169

   67 default: "DEFAULT" . ":" "NEW LINE" functionbody

    ":"  shift, and go to state 180


State 170

   66 case: case . case
   66     | case case .

    "CASE"  shift, and go to state 160

    "CASE"    [reduce using rule 66 (case)]
    $default  reduce using rule 66 (case)

    case  go to state 170


State 171

   64 checkcase: "SWITCH" "(" expression ")" "NEW LINE" case default . "END SWITCH"

    "END SWITCH"  shift, and go to state 181


State 172

   78 return: "RETURN" literal ";" "NEW LINE" .

    $default  reduce using rule 78 (return)


State 173

   69 print: "PRINT" "(" "\"" message "\"" "," "[" var . "]" ")" ";"

    "]"  shift, and go to state 182


State 174

   59 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody "ENDIF" .

    $default  reduce using rule 59 (checkif)


State 175

   60 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody "ELSE" . "NEW LINE" functionbody "ENDIF"

    "NEW LINE"  shift, and go to state 183


State 176

   62 elseif: "ELSE IF" . "NEW LINE" functionbody

    "NEW LINE"  shift, and go to state 184


State 177

   61 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody elseif . "ELSE" "NEW LINE" functionbody "ENDIF"
   63 elseif: elseif . elseif

    "ELSE"     shift, and go to state 185
    "ELSE IF"  shift, and go to state 176

    elseif  go to state 186


State 178

   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" . "NEW LINE" functionbody "END FOR"

    "NEW LINE"  shift, and go to state 187


State 179

   65 case: "CASE" "(" expression . ")" ":" "NEW LINE" functionbody

    ")"  shift, and go to state 188


State 180

   67 default: "DEFAULT" ":" . "NEW LINE" functionbody

    "NEW LINE"  shift, and go to state 189


State 181

   64 checkcase: "SWITCH" "(" expression ")" "NEW LINE" case default "END SWITCH" .

    $default  reduce using rule 64 (checkcase)


State 182

   69 print: "PRINT" "(" "\"" message "\"" "," "[" var "]" . ")" ";"

    ")"  shift, and go to state 190


State 183

   60 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" . functionbody "ENDIF"

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 191
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 184

   62 elseif: "ELSE IF" "NEW LINE" . functionbody

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 192
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 185

   61 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody elseif "ELSE" . "NEW LINE" functionbody "ENDIF"

    "NEW LINE"  shift, and go to state 193


State 186

   63 elseif: elseif . elseif
   63       | elseif elseif .

    "ELSE IF"  shift, and go to state 176

    "ELSE IF"  [reduce using rule 63 (elseif)]
    $default   reduce using rule 63 (elseif)

    elseif  go to state 186


State 187

   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" . functionbody "END FOR"

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 194
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 188

   65 case: "CASE" "(" expression ")" . ":" "NEW LINE" functionbody

    ":"  shift, and go to state 195


State 189

   67 default: "DEFAULT" ":" "NEW LINE" . functionbody

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 196
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 190

   69 print: "PRINT" "(" "\"" message "\"" "," "[" var "]" ")" . ";"

    ";"  shift, and go to state 197


State 191

   18 functionbody: functionbody . command
   60 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody . "ENDIF"

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "ENDIF"   shift, and go to state 198
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 192

   18 functionbody: functionbody . command
   62 elseif: "ELSE IF" "NEW LINE" functionbody .

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    $default  reduce using rule 62 (elseif)

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 193

   61 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" . functionbody "ENDIF"

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 199
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 194

   18 functionbody: functionbody . command
   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody . "END FOR"

    "PRINT"    shift, and go to state 46
    "IF"       shift, and go to state 47
    "WHILE"    shift, and go to state 48
    "FOR"      shift, and go to state 49
    "END FOR"  shift, and go to state 200
    "SWITCH"   shift, and go to state 50
    "BREAK"    shift, and go to state 51
    "/"        shift, and go to state 52
    "%"        shift, and go to state 53
    "ID"       shift, and go to state 54

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 195

   65 case: "CASE" "(" expression ")" ":" . "NEW LINE" functionbody

    "NEW LINE"  shift, and go to state 201


State 196

   18 functionbody: functionbody . command
   67 default: "DEFAULT" ":" "NEW LINE" functionbody .

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    $default  reduce using rule 67 (default)

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 197

   69 print: "PRINT" "(" "\"" message "\"" "," "[" var "]" ")" ";" .

    $default  reduce using rule 69 (print)


State 198

   60 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody "ELSE" "NEW LINE" functionbody "ENDIF" .

    $default  reduce using rule 60 (checkif)


State 199

   18 functionbody: functionbody . command
   61 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody . "ENDIF"

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "ENDIF"   shift, and go to state 202
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67


State 200

   46 forloop: "FOR" "ID" "=" "NUMBER" "TO" "NUMBER" "STEP" "NUMBER" "NEW LINE" functionbody "END FOR" .

    $default  reduce using rule 46 (forloop)


State 201

   65 case: "CASE" "(" expression ")" ":" "NEW LINE" . functionbody

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    "PRINT"   [reduce using rule 19 (functionbody)]
    "IF"      [reduce using rule 19 (functionbody)]
    "WHILE"   [reduce using rule 19 (functionbody)]
    "FOR"     [reduce using rule 19 (functionbody)]
    "SWITCH"  [reduce using rule 19 (functionbody)]
    "BREAK"   [reduce using rule 19 (functionbody)]
    "/"       [reduce using rule 19 (functionbody)]
    "%"       [reduce using rule 19 (functionbody)]
    "ID"      [reduce using rule 19 (functionbody)]
    $default  reduce using rule 19 (functionbody)

    functionbody  go to state 203
    command       go to state 56
    assignment    go to state 57
    loop          go to state 58
    forloop       go to state 59
    whileloop     go to state 60
    check         go to state 61
    checkif       go to state 62
    checkcase     go to state 63
    print         go to state 64
    break         go to state 65
    comment       go to state 66
    mcomment      go to state 67


State 202

   61 checkif: "IF" "(" condition ")" "THEN" "NEW LINE" functionbody elseif "ELSE" "NEW LINE" functionbody "ENDIF" .

    $default  reduce using rule 61 (checkif)


State 203

   18 functionbody: functionbody . command
   65 case: "CASE" "(" expression ")" ":" "NEW LINE" functionbody .

    "PRINT"   shift, and go to state 46
    "IF"      shift, and go to state 47
    "WHILE"   shift, and go to state 48
    "FOR"     shift, and go to state 49
    "SWITCH"  shift, and go to state 50
    "BREAK"   shift, and go to state 51
    "/"       shift, and go to state 52
    "%"       shift, and go to state 53
    "ID"      shift, and go to state 54

    $default  reduce using rule 65 (case)

    command     go to state 83
    assignment  go to state 57
    loop        go to state 58
    forloop     go to state 59
    whileloop   go to state 60
    check       go to state 61
    checkif     go to state 62
    checkcase   go to state 63
    print       go to state 64
    break       go to state 65
    comment     go to state 66
    mcomment    go to state 67
